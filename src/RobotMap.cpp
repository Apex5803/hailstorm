// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<Encoder> RobotMap::driveTraindBaseEncoderL;
std::shared_ptr<Encoder> RobotMap::driveTraindBaseEncoderR;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseL1;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseL2;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseL3;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseR1;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseR2;
std::shared_ptr<SpeedController> RobotMap::driveTraindBaseR3;
std::shared_ptr<AnalogGyro> RobotMap::driveTraindBaseGyro;
std::shared_ptr<DigitalInput> RobotMap::gearergearDetect;
std::shared_ptr<SpeedController> RobotMap::gearergearRoller;
std::shared_ptr<DoubleSolenoid> RobotMap::gearergearSolenoid1;
std::shared_ptr<DoubleSolenoid> RobotMap::gearergearSolenoid2;
std::shared_ptr<SpeedController> RobotMap::ballCollectorintakeRoller;
std::shared_ptr<DoubleSolenoid> RobotMap::ballCollectorcollectorSolenoid1;
std::shared_ptr<DoubleSolenoid> RobotMap::ballCollectorcollectorSolenoid2;
std::shared_ptr<SpeedController> RobotMap::magiKarpetbeltMotor;
std::shared_ptr<SpeedController> RobotMap::feederfeederWheelLow;
std::shared_ptr<SpeedController> RobotMap::feederfeederWheelHigh;
std::shared_ptr<SpeedController> RobotMap::shootershooterWheelPrimary;
std::shared_ptr<SpeedController> RobotMap::shootershooterWheelBooster;
std::shared_ptr<Encoder> RobotMap::shootershooterEncoderPrimary;
std::shared_ptr<Encoder> RobotMap::shootershooterEncoderBooster;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveTraindBaseEncoderL.reset(new Encoder(0, 1, false, Encoder::k4X));
    lw->AddSensor("DriveTrain", "dBaseEncoderL", driveTraindBaseEncoderL);
    driveTraindBaseEncoderL->SetDistancePerPulse(1.0);
    driveTraindBaseEncoderL->SetPIDSourceType(PIDSourceType::kRate);
    driveTraindBaseEncoderR.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("DriveTrain", "dBaseEncoderR", driveTraindBaseEncoderR);
    driveTraindBaseEncoderR->SetDistancePerPulse(1.0);
    driveTraindBaseEncoderR->SetPIDSourceType(PIDSourceType::kRate);
    driveTraindBaseL1.reset(new VictorSP(0));
    lw->AddActuator("DriveTrain", "dBaseL1", std::static_pointer_cast<VictorSP>(driveTraindBaseL1));
    
    driveTraindBaseL2.reset(new VictorSP(1));
    lw->AddActuator("DriveTrain", "dBaseL2", std::static_pointer_cast<VictorSP>(driveTraindBaseL2));
    
    driveTraindBaseL3.reset(new VictorSP(2));
    lw->AddActuator("DriveTrain", "dBaseL3", std::static_pointer_cast<VictorSP>(driveTraindBaseL3));
    
    driveTraindBaseR1.reset(new VictorSP(3));
    lw->AddActuator("DriveTrain", "dBaseR1", std::static_pointer_cast<VictorSP>(driveTraindBaseR1));
    
    driveTraindBaseR2.reset(new VictorSP(4));
    lw->AddActuator("DriveTrain", "dBaseR2", std::static_pointer_cast<VictorSP>(driveTraindBaseR2));
    
    driveTraindBaseR3.reset(new VictorSP(5));
    lw->AddActuator("DriveTrain", "dBaseR3", std::static_pointer_cast<VictorSP>(driveTraindBaseR3));
    
    driveTraindBaseGyro.reset(new AnalogGyro(0));
    lw->AddSensor("DriveTrain", "dBaseGyro", driveTraindBaseGyro);
    driveTraindBaseGyro->SetSensitivity(0.007);
    gearergearDetect.reset(new DigitalInput(4));
    lw->AddSensor("Gearer", "gearDetect", gearergearDetect);
    
    gearergearRoller.reset(new VictorSP(6));
    lw->AddActuator("Gearer", "gearRoller", std::static_pointer_cast<VictorSP>(gearergearRoller));
    
    gearergearSolenoid1.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Gearer", "gearSolenoid1", gearergearSolenoid1);
    
    gearergearSolenoid2.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Gearer", "gearSolenoid2", gearergearSolenoid2);
    
    ballCollectorintakeRoller.reset(new VictorSP(7));
    lw->AddActuator("BallCollector", "intakeRoller", std::static_pointer_cast<VictorSP>(ballCollectorintakeRoller));
    
    ballCollectorcollectorSolenoid1.reset(new DoubleSolenoid(0, 4, 5));
    lw->AddActuator("BallCollector", "collectorSolenoid1", ballCollectorcollectorSolenoid1);
    
    ballCollectorcollectorSolenoid2.reset(new DoubleSolenoid(0, 6, 7));
    lw->AddActuator("BallCollector", "collectorSolenoid2", ballCollectorcollectorSolenoid2);
    
    magiKarpetbeltMotor.reset(new VictorSP(8));
    lw->AddActuator("MagiKarpet", "beltMotor", std::static_pointer_cast<VictorSP>(magiKarpetbeltMotor));
    
    feederfeederWheelLow.reset(new VictorSP(9));
    lw->AddActuator("Feeder", "feederWheelLow", std::static_pointer_cast<VictorSP>(feederfeederWheelLow));
    
    feederfeederWheelHigh.reset(new VictorSP(10));
    lw->AddActuator("Feeder", "feederWheelHigh", std::static_pointer_cast<VictorSP>(feederfeederWheelHigh));
    
    shootershooterWheelPrimary.reset(new TalonSRX(11));
    lw->AddActuator("Shooter", "shooterWheelPrimary", std::static_pointer_cast<TalonSRX>(shootershooterWheelPrimary));
    
    shootershooterWheelBooster.reset(new TalonSRX(12));
    lw->AddActuator("Shooter", "shooterWheelBooster", std::static_pointer_cast<TalonSRX>(shootershooterWheelBooster));
    
    shootershooterEncoderPrimary.reset(new Encoder(5, 6, false, Encoder::k4X));
    lw->AddSensor("Shooter", "shooterEncoderPrimary", shootershooterEncoderPrimary);
    shootershooterEncoderPrimary->SetDistancePerPulse(1.0);
    shootershooterEncoderPrimary->SetPIDSourceType(PIDSourceType::kRate);
    shootershooterEncoderBooster.reset(new Encoder(7, 8, false, Encoder::k4X));
    lw->AddSensor("Shooter", "shooterEncoderBooster", shootershooterEncoderBooster);
    shootershooterEncoderBooster->SetDistancePerPulse(1.0);
    shootershooterEncoderBooster->SetPIDSourceType(PIDSourceType::kRate);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
