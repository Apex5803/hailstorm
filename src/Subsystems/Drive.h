// RobotBuilder Version: 2.0

//

// This file was generated by RobotBuilder. It contains sections of

// code that are automatically generated and assigned by robotbuilder.

// These sections will be updated in the future when you export to

// C++ from RobotBuilder. Do not put any code or make any change in

// the blocks indicating autogenerated code or it will be lost on an

// update. Deleting the comments indicating the section will prevent

// it from being updated in the future.





#ifndef DRIVE_H

#define DRIVE_H

#include "Commands/Subsystem.h"

#include "WPILib.h"



/**

 * This class encapsulates the drivebase subsystem and implements the command calling methods to

 * drive the robot.

 */

class Drive: public Subsystem {

private:

	// It's desirable that everything possible is private except

	// for methods that implement subsystem capabilities



	/*
	 * The left front motor of the drive base
	 */
	std::shared_ptr<SpeedController> dBaseL1;

	/*
	 * The left back motor of the drive base
	 */
	std::shared_ptr<SpeedController> dBaseL2;

	/*
	 * The right front motor of the drive base
	 */
	std::shared_ptr<SpeedController> dBaseR1;

	/*
	 * The right back motor of the drive base
	 */
	std::shared_ptr<SpeedController> dBaseR2;

	/*
	 * The encoder object located on the right side of the bot
	 */
	std::shared_ptr<Encoder> m_right_encoder;

	/*
	 * The encoder object located on the right side of the bot
	 */
	std::shared_ptr<Encoder> m_left_encoder;



	/*

	 * This is the physical pointer that will run the robot drive.

	 */

	RobotDrive * drive;

public:

	/**
	 * The number of encoder ticks per rotation
	 */
	const int TICKS_PER_ROTATION = 256;

	/**
	 * The size of your wheels (in inches)
	 */
	const float WHEEL_DIAMETER = 3.5;

	/**
	 * This is the width of your robot (in inches)
	 */
	const float BASE_WIDTH = 26;


	/*

	 * Initializes a new instance of the Drive subsystem class.

	 */

	Drive();



	/*

	 * Initializes the default command for driving this robot around (TankDrive).

	 */

	void InitDefaultCommand();



	/*

	 * This method will drive the robot with the raw speeds provided

	 *

	 * @param left: The amount of power provided to the left motor

	 * @param right: The amount of power provided to the right motor

	 */

	void MyDrive(float, float);



	/*

	 * This method will drive the robot given two joysticks. Note that this will take the

	 * Y axis of th ejoysticks provided!

	 *

	 * @param leftStick: The left joystick to use

	 * @param rightJoystick: The right joystick to use

	 */

	void MyDrive(Joystick *, Joystick *);

	/**
	 * Stops the robot
	 */
	void Stop();

	/*
	 * Gets the value of the right side encoder
	 * @return the ticks on the encoder
	 */
	int GetRightEncoder();

	/*
	 * This method will get the apparent speed of the encoder in ticks/s per the documentation
	 * @remark This checks for nan and will return 0 when the encoder isn't moving because ¯\_(-.-)_/¯
	 */
	double GetRightEncoderSpeed();

	/*
	 * This method will get the apparent speed of the encoder in ticks/s per the documentation
	 * @remark This checks for nan and will return 0 when the encoder isn't moving because ¯\_(-.-)_/¯
	 */
	double GetLeftEncoderSpeed();

	/*
	 * Gets the value of the left side encoder
	 * @return the ticks on the encoder
	 */
	int GetLeftEncoder();

	/*
	 * Resets the counts on all of the encoders to 0
	 */
	void ResetEncoders();

};



#endif
